{"ast":null,"code":"import api from './api';\nimport { decodeToken } from './auth';\nconst BASE = '/api/v1/employees';\nexport async function listEmployees(params) {\n  const res = await api.get(BASE, {\n    params\n  });\n  return res.data;\n}\nexport async function createEmployee(employee) {\n  const res = await api.post(BASE, employee);\n  return res.data;\n}\nexport async function getEmployee(id) {\n  const res = await api.get(`${BASE}/${id}`);\n  return res.data;\n}\nexport async function updateEmployee(id, employee) {\n  const res = await api.put(`${BASE}/${id}`, employee);\n  return res.data;\n}\nexport async function deleteEmployee(id) {\n  const res = await api.delete(`${BASE}/${id}`);\n  return res.data;\n}\n\n// Try to fetch the current logged-in employee. First try a /me endpoint, then\n// fall back to listing employees and matching by user id from the token.\nexport async function getMyEmployee() {\n  try {\n    const res = await api.get(`${BASE}/me`);\n    return res.data;\n  } catch (err) {\n    // If /me isn't available, try to match by token user id\n    if (err.response && err.response.status === 404) {\n      try {\n        const payload = decodeToken();\n        const userId = (payload === null || payload === void 0 ? void 0 : payload.sub) || (payload === null || payload === void 0 ? void 0 : payload.userId) || (payload === null || payload === void 0 ? void 0 : payload.id) || (payload === null || payload === void 0 ? void 0 : payload.username);\n        if (!userId) throw err;\n        const list = await listEmployees();\n        return list.find(e => String(e.userId) === String(userId) || String(e.id) === String(userId)) || null;\n      } catch (e2) {\n        throw err;\n      }\n    }\n    throw err;\n  }\n}","map":{"version":3,"names":["api","decodeToken","BASE","listEmployees","params","res","get","data","createEmployee","employee","post","getEmployee","id","updateEmployee","put","deleteEmployee","delete","getMyEmployee","err","response","status","payload","userId","sub","username","list","find","e","String","e2"],"sources":["D:/emp_mngmnt/employee-mgmnt-4/employee-mgmnt/payrollUI-4/payrollUI/src/services/employeeService.js"],"sourcesContent":["import api from './api';\r\nimport { decodeToken } from './auth';\r\n\r\nconst BASE = '/api/v1/employees';\r\n\r\nexport async function listEmployees(params) {\r\n  const res = await api.get(BASE, { params });\r\n  return res.data;\r\n}\r\n\r\nexport async function createEmployee(employee) {\r\n  const res = await api.post(BASE, employee);\r\n  return res.data;\r\n}\r\n\r\nexport async function getEmployee(id) {\r\n  const res = await api.get(`${BASE}/${id}`);\r\n  return res.data;\r\n}\r\n\r\nexport async function updateEmployee(id, employee) {\r\n  const res = await api.put(`${BASE}/${id}`, employee);\r\n  return res.data;\r\n}\r\n\r\nexport async function deleteEmployee(id) {\r\n  const res = await api.delete(`${BASE}/${id}`);\r\n  return res.data;\r\n}\r\n\r\n// Try to fetch the current logged-in employee. First try a /me endpoint, then\r\n// fall back to listing employees and matching by user id from the token.\r\nexport async function getMyEmployee() {\r\n  try {\r\n    const res = await api.get(`${BASE}/me`);\r\n    return res.data;\r\n  } catch (err) {\r\n    // If /me isn't available, try to match by token user id\r\n    if (err.response && err.response.status === 404) {\r\n      try {\r\n        const payload = decodeToken();\r\n        const userId = payload?.sub || payload?.userId || payload?.id || payload?.username;\r\n        if (!userId) throw err;\r\n        const list = await listEmployees();\r\n        return list.find(e => String(e.userId) === String(userId) || String(e.id) === String(userId)) || null;\r\n      } catch (e2) {\r\n        throw err;\r\n      }\r\n    }\r\n    throw err;\r\n  }\r\n}\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,OAAO;AACvB,SAASC,WAAW,QAAQ,QAAQ;AAEpC,MAAMC,IAAI,GAAG,mBAAmB;AAEhC,OAAO,eAAeC,aAAaA,CAACC,MAAM,EAAE;EAC1C,MAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,GAAG,CAACJ,IAAI,EAAE;IAAEE;EAAO,CAAC,CAAC;EAC3C,OAAOC,GAAG,CAACE,IAAI;AACjB;AAEA,OAAO,eAAeC,cAAcA,CAACC,QAAQ,EAAE;EAC7C,MAAMJ,GAAG,GAAG,MAAML,GAAG,CAACU,IAAI,CAACR,IAAI,EAAEO,QAAQ,CAAC;EAC1C,OAAOJ,GAAG,CAACE,IAAI;AACjB;AAEA,OAAO,eAAeI,WAAWA,CAACC,EAAE,EAAE;EACpC,MAAMP,GAAG,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,GAAGJ,IAAI,IAAIU,EAAE,EAAE,CAAC;EAC1C,OAAOP,GAAG,CAACE,IAAI;AACjB;AAEA,OAAO,eAAeM,cAAcA,CAACD,EAAE,EAAEH,QAAQ,EAAE;EACjD,MAAMJ,GAAG,GAAG,MAAML,GAAG,CAACc,GAAG,CAAC,GAAGZ,IAAI,IAAIU,EAAE,EAAE,EAAEH,QAAQ,CAAC;EACpD,OAAOJ,GAAG,CAACE,IAAI;AACjB;AAEA,OAAO,eAAeQ,cAAcA,CAACH,EAAE,EAAE;EACvC,MAAMP,GAAG,GAAG,MAAML,GAAG,CAACgB,MAAM,CAAC,GAAGd,IAAI,IAAIU,EAAE,EAAE,CAAC;EAC7C,OAAOP,GAAG,CAACE,IAAI;AACjB;;AAEA;AACA;AACA,OAAO,eAAeU,aAAaA,CAAA,EAAG;EACpC,IAAI;IACF,MAAMZ,GAAG,GAAG,MAAML,GAAG,CAACM,GAAG,CAAC,GAAGJ,IAAI,KAAK,CAAC;IACvC,OAAOG,GAAG,CAACE,IAAI;EACjB,CAAC,CAAC,OAAOW,GAAG,EAAE;IACZ;IACA,IAAIA,GAAG,CAACC,QAAQ,IAAID,GAAG,CAACC,QAAQ,CAACC,MAAM,KAAK,GAAG,EAAE;MAC/C,IAAI;QACF,MAAMC,OAAO,GAAGpB,WAAW,CAAC,CAAC;QAC7B,MAAMqB,MAAM,GAAG,CAAAD,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEE,GAAG,MAAIF,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEC,MAAM,MAAID,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAET,EAAE,MAAIS,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEG,QAAQ;QAClF,IAAI,CAACF,MAAM,EAAE,MAAMJ,GAAG;QACtB,MAAMO,IAAI,GAAG,MAAMtB,aAAa,CAAC,CAAC;QAClC,OAAOsB,IAAI,CAACC,IAAI,CAACC,CAAC,IAAIC,MAAM,CAACD,CAAC,CAACL,MAAM,CAAC,KAAKM,MAAM,CAACN,MAAM,CAAC,IAAIM,MAAM,CAACD,CAAC,CAACf,EAAE,CAAC,KAAKgB,MAAM,CAACN,MAAM,CAAC,CAAC,IAAI,IAAI;MACvG,CAAC,CAAC,OAAOO,EAAE,EAAE;QACX,MAAMX,GAAG;MACX;IACF;IACA,MAAMA,GAAG;EACX;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}